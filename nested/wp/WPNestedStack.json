{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Creation Wordpress Secure, Fast, Fault-tolerant and Scalable. Please before continue you must create a Store Param in SSM > Store Param called /App/WP/DBPassword Type SecureString",
    "Parameters": {
        "DBName": {
            "Default": "mydb",
            "Description": "My database",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "64",
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription": "Must begin with a letter and contain only alphanumeric characters."
        },
        "DBInstanceClass": {
            "Default": "db.t3.micro",
            "Description": "DB instance class",
            "Type": "String",
            "ConstraintDescription": "Must select a valid DB instance type."
        },
        "DBAllocatedStorage": {
            "Default": "50",
            "Description": "The size of the database (GiB)",
            "Type": "Number",
            "MinValue": "20",
            "MaxValue": "65536",
            "ConstraintDescription": "must be between 20 and 65536 GiB."
        },
        "DBUsername": {
            "NoEcho": "true",
            "Default": "rootUserDB",
            "Description": "Username for MySQL database access",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "16",
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
        },
        "LatestAmiId": {
            "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
            "Description": "AMI for EC2",
            "Default": "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
        },
        "InstanceEC2": {
            "Type": "String",
            "Description": "Instance for EC2 you can check all the types in https://aws.amazon.com/ec2/instance-types/",
            "Default": "t2.micro"
        },
        "ALBRequestCountTargetValue": {
            "Default": "50",
            "Type": "String",
            "Description": "The optimal average request count per instance during any one-minute interval"
        }
    },
    "Resources": {
        "N1VPCArch": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": "s3.url.file.N1_VPCArch.json"
            }
        },
        "N2DBRDS": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": "s3.url.file.N2_DB_RDS.json",
                "Parameters": {
                    "DBName": {
                        "Ref": "DBName"
                    },
                    "DBInstanceClass": {
                        "Ref": "DBInstanceClass"
                    },
                    "DBAllocatedStorage": {
                        "Ref": "DBAllocatedStorage"
                    },
                    "DBUsername": {
                        "Ref": "DBUsername"
                    },
                    "SubnetDBA": {
                        "Fn::GetAtt": ["N1VPCArch", "Outputs.OutSnDBA"]
                    },
                    "SubnetDBB": {
                        "Fn::GetAtt": ["N1VPCArch", "Outputs.OutSnDBB"]
                    },
                    "SubnetDBC": {
                        "Fn::GetAtt": ["N1VPCArch", "Outputs.OutSnDBC"]
                    },
                    "SecGroupDB": {
                        "Fn::GetAtt": ["N1VPCArch", "Outputs.OutSGDB"]
                    }
                }
            }
        },
        "N3EFSSF": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": "s3.url.file.N3_EFS_SF.json",
                "Parameters": {
                    "SubnetAppA": {
                        "Fn::GetAtt": ["N1VPCArch", "Outputs.OutSnAppA"]
                    },
                    "SubnetAppB": {
                        "Fn::GetAtt": ["N1VPCArch", "Outputs.OutSnAppB"]
                    },
                    "SubnetAppC": {
                        "Fn::GetAtt": ["N1VPCArch", "Outputs.OutSnAppC"]
                    },
                    "SGMountTarget": {
                        "Fn::GetAtt": ["N1VPCArch", "Outputs.OutSGEFS"]
                    }
                }
            }
        },
        "N4ALBEC2": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": "s3.url.file.N4_ALB_EC2.json",
                "Parameters": {
                    "VPC": {
                        "Fn::GetAtt": ["N1VPCArch", "Outputs.OutVPC"]
                    },
                    "SubnetPubA": {
                        "Fn::GetAtt": ["N1VPCArch", "Outputs.OutSnPubA"]
                    },
                    "SubnetPubB": {
                        "Fn::GetAtt": ["N1VPCArch", "Outputs.OutSnPubB"]
                    },
                    "SubnetPubC": {
                        "Fn::GetAtt": ["N1VPCArch", "Outputs.OutSnPubC"]
                    },
                    "SecurityGroupLB": {
                        "Fn::GetAtt": ["N1VPCArch", "Outputs.OutSGALB"]
                    }
                }
            }
        },
        "N5LTemplateEC2": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": "s3.url.file.N5_LTemplate_EC2.json",
                "Parameters": {
                    "LatestAmiId": {
                        "Ref": "LatestAmiId"
                    },
                    "InstanceEC2": {
                        "Ref": "InstanceEC2"
                    },
                    "SecurityGroupEC2": {
                        "Fn::GetAtt": ["N1VPCArch", "Outputs.OutSGWorp"]
                    }
                }
            }
        },
        "N6ASGEC2": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": "s3.url.file.N6_ASG_EC2.json",
                "DependsOn": "N2DBRDS",
                "Parameters": {
                    "VPC": {
                        "Fn::GetAtt": ["N1VPCArch", "Outputs.OutVPC"]
                    },
                    "SubnetPubA": {
                        "Fn::GetAtt": ["N1VPCArch", "Outputs.OutSnPubA"]
                    },
                    "SubnetPubB": {
                        "Fn::GetAtt": ["N1VPCArch", "Outputs.OutSnPubB"]
                    },
                    "SubnetPubC": {
                        "Fn::GetAtt": ["N1VPCArch", "Outputs.OutSnPubC"]
                    },
                    "ALBRequestCountTargetValue": {
                        "Ref": "ALBRequestCountTargetValue"
                    },
                    "LoadBalancerFullName": {
                        "Fn::GetAtt": ["N4ALBEC2", "Outputs.OutLBFullname"]
                    },
                    "TargetGroupLoadBalancerARN": {
                        "Fn::GetAtt": [
                            "N4ALBEC2",
                            "Outputs.OutLBTargetGroupARN"
                        ]
                    },
                    "TargetGroupFullName": {
                        "Fn::GetAtt": ["N4ALBEC2", "Outputs.OutLBTGFullname"]
                    },
                    "LaunchTemplateId": {
                        "Fn::GetAtt": [
                            "N5LTemplateEC2",
                            "Outputs.OutLTemplateId"
                        ]
                    },
                    "LaunchTemplateVersion": {
                        "Fn::GetAtt": [
                            "N5LTemplateEC2",
                            "Outputs.OutLTemplateVersion"
                        ]
                    }
                }
            }
        }
    }
}
